name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    name: JAR 빌드 & 도커 허브 푸쉬
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: JDK 버전 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: application.yml 환경변수 주입
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-prod.yml
        env:
          spring.datasource.url: ${{secrets.MYSQL_URL}}
          spring.datasource.username: ${{secrets.MYSQL_USERNAME}}
          spring.datasource.password: ${{secrets.MYSQL_PASSWORD}}

          spring.data.redis.host: ${{secrets.REDIS_HOST}}
          spring.data.redis.password: ${{secrets.REDIS_PASSWORD}}

          spring.security.jwt.access-token.expired-time: ${{secrets.ACCESS_TOKEN_EXPIRED_TIME}}
          spring.security.jwt.refresh-token.expired-time: ${{secrets.REFRESH_TOKEN_EXPIRED_TIME}}
          spring.security.jwt.secret: ${{secrets.JWT_SECRET}}

          spring.security.oauth2.client.registration.github.client-id: ${{secrets.GIT_CLIENT_ID}}
          spring.security.oauth2.client.registration.github.client-secret: ${{secrets.GIT_CLIENT_SECRET}}

          sentry.dsn: ${{secrets.SENTRY_DSN}}

      - name: JAR 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test -i --no-daemon -Dspring.profiles.active=prod

      - name: 도커 허브 로그인
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_PASSWORD}}

      - name: 도커 이미지 빌드
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/mogaktae-server:latest .

      - name: 도커 이미지 푸쉬
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/mogaktae-server:latest

  deploy:
    name: 앱센터 서버에 배포
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: docker-compose.yml 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.APPCENTER_SERVER_IP}}
          username: ${{secrets.APPCENTER_SERVER_USERNAME}}
          password: ${{secrets.APPCENTER_SERVER_PASSWORD}}
          port: ${{secrets.APPCENTER_SERVER_PORT}}
          source: "docker-compose.yml"
          target: "/home/serverking/mogaktae"

      - name: 앱센터 서버에 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.APPCENTER_SERVER_IP}}
          username: ${{secrets.APPCENTER_SERVER_USERNAME}}
          password: ${{secrets.APPCENTER_SERVER_PASSWORD}}
          port: ${{secrets.APPCENTER_SERVER_PORT}}
          script: |
            cd /home/serverking/mogaktae

            echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" > .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env

            docker-compose stop spring redis
            docker-compose rm -f spring redis

            docker-compose pull spring

            docker-compose up -d redis spring

            docker image prune -f
            
            rm -rf .env